1. Viết chương trình/lệnh mô tả các bước thực hiện sơ đồ git tree sau đây ở local repository
git init 
touch c1.txt
git add c1.txt
git commit -m"Commit 1"
touch c2.txt
git add c2.txt
git commit -m"Commit 2"
touch c3.txt
git add c3.txt
git commit -m"Commit 3"
git branch feature master
git checkout feature
touch c4.txt
git add c4.txt
git commit -m"Commit 4"
touch c5.txt
git add c5.txt
git commit -m"Commit 5"
git branch bug master
git checkout bug
touch c6.txt
git add c6.txt
git commit -m"Commit 6"
touch c7.txt
git add c7.txt
git commit -m"Commit 7"
touch c8.txt
git add c8.txt
git commit -m"Commit 8"
2. Viết lệnh thực hiện gộp nhánh bug vào nhánh feature sử dụng git merge
git checkout feature
git merge bug
3. Viết lệnh thực hiện gộp nhánh feature vào bug sử dụng git rebase
git checkout feature
git rebase bug
4. Phân biệt git merge và git rebase(giống, khác nhau, khi nào nên sử dụng)
-giống:đều dùng để gộp 2 nhánh lại với nhau
-khác:+merge khi gộp thì tạo ra commit mới
      +rebase khi gộp thì ko tạo ra commit mới mà tạo ra mã hash mới
-khi nào nên sử dụng:+dùng merge khi ko muốn đổi mã hash
                     +dùng rebase khi muốn lịch sử đẹp mà dễ tìm kiếm 
5. Phân biệt git fetch và git clone
+git fetch: lấy code mới nhất trên remote về nhưng trước đó chúng ta phải liên kết local repo với remote repo, và tạo 1 dự án 
+git clone: dùng khi máy chủ chưa có local repository ,nó sẽ tự động tạo 1 dự án có tên giống với tên remote repo,tự động liên kết với remote repo và tạo 1 branch trùng với default branch 
6. Phân biệt git fetch và git pull
git fetch: lấy code mới nhất trên remote về nhưng trước đó chúng ta phải liên kết local repo với remote repo, và tạo 1 dự án 
git pull: vừa fetch vừa merge nhánh
7. Phân biệt git pull và git pull --rebase
git pull:vừa fetch vừa merge nhánh
git  --rebase :fetch về nhưng gộp nhánh bằng rebase 
8. Git log dùng để làm gì
git log dùng để xem lịch sử commit trên nhánh hiện tại
9. Git status dùng để làm gì
git status dùng để xem trạng thái các file
10. Git add dùng để làm gì
git add dùng để đưa các file từ untrac, modifile sang staged
11. Git commit dùng để làm gì
git commit dùng để đưa các file từ staged sang unmodifile
12. Mô tả lệnh để tạo branch ở local
c1:git branch tennhanhmoi mã hasd
c2:git branch tennhanhmoi tennhanhcu
c3:git checkout -b tennhanhmoi tennhanhcu
13. Mô tả lệnh để xóa branch ở local
git branch -d tennhanh:dùng khi nhánh đó đã đc quản lí bởi 1 nhánh khác 
git branch -D tennhanh:dùng khi nhánh đó ko đc quản lí bởi nhánh nào cả
14. Mô tả lệnh để xóa branch ở remote
git push origin tennhanhoremote -d
15. Nhánh trung gian là gì
nhánh trung gian là  nhánh dùng để chứa code mới nhất từ nhánh ở remote
16. Detach HEAD là gì
là kiểu nó trỏ đến 1 nhánh khi commit thì nhánh nhảy lên,có thể trỏ đến commit khi commit thì head nhảy lên như vậy commit sẽ ko đc quản lí bởi  nhánh nào cả(ko nên sd)
khi muốn detach head thì sd:git checkout nhanhcantro
17. Phân biệt HEAD và BRANCH
HEAD:là 1 con trỏ trong git có thể nhánh tới 1 nhánh hoặc trỏ trực tiếp đến commit
BRANCH:là 1 nhánh trỏ đến 1 commit,mỗi nhánh đại diện cho 1 chuỗi các commit
18.Có mấy cách để xóa commit, mô tả và cho ví dụ
có 2 cách để xóa 1 commit:
C1:git reset --hard HEAD~n(xóa commit và xóa luôn nội dung)
+vd:3hgfueg add sum function (HEAD-->commit 1) có file là c1.txt
khi gõ lệnh git reset --hard HEAD~1 thì sẽ xóa commit 1 và xóa luôn file c1.txt
C2:git reset --soft HEAD~n(xóa commit nhưng vẫn giữ lại nội dung)
+vd:3hgfueg add sum function (HEAD-->commit 1) có file là c1.txt
khi gõ lệnh git reset --soft HEAD~1 thì sẽ xóa commit 1 những file c1.txt vẫn được giữ lại
19. Liệt kê các trạng thái của file trong git, giải thích từng trạng thái
-untracked:mới tạo ra,chỉnh sửa,... chưa được git quản lí,chưacommit
-unmodified:file vừa mới commit
-modified:chỉnh sửa 1 file đã từng được commit
-staged:file được dùng để commit
20. Mô tả các bước cần thực hiện khi nhận 1 task từ dự án, cho ví dụ
B1:tạo dự án,có tên dự án
--> java-todo-app
B2:gải lập kho chứa
-->new file: readme.txt
git init 
git add readme.txt
git commit -m"khởi tạo dự án"
B3: đăng nhập vào github.com
-->tạo kho chứa java-todo-app
B4:tạo remote repo
-->sao chép đường dẫn
B5:liên kết remote repo với local repo
 -->git remote add origin đườngdẫn
B6:push code từ local lên remote
B7: tạo nhánh mới tuè local
B8:thực hiện chưc năng
B9: fecth code về
B10: push chức năng lên lại



