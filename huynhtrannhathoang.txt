1. Viết chương trình/lệnh mô tả các bước thực hiện sơ đồ git tree sau đây ở local repository
->git init 
->touch c1.txt ->notepad c1.txt -> git add c1.txt -> git commit -m "add file c1"
->touch c2.txt ->notepad c2.txt -> git add c2.txt -> git commit -m "add file c2"
->touch c3.txt ->notepad c3.txt -> git add c3.txt -> git commit -m "add file c3"
->touch c4.txt ->notepad c4.txt -> git add c4.txt -> git commit -m "add file c4"
->touch c5.txt ->notepad c5.txt -> git add c5.txt -> git commit -m "add file c5"
->touch c6.txt ->notepad c6.txt -> git add c6.txt -> git commit -m "add file c6"
->touch c7.txt ->notepad c7.txt -> git add c7.txt -> git commit -m "add file c7"
->touch c8.txt ->notepad c8.txt -> git add c8.txt -> git commit -m "add file c8"
2. Viết lệnh thực hiện gộp nhánh bug vào nhánh feature sử dụng git merge
->git checkout feature->git merge bug 
3. Viết lệnh thực hiện gộp nhánh feature vào bug sử dụng git rebase
->git checkout feature->git rebase bug 
4.Phân biệt git merge và git rebase(giống, khác nhau, khi nào nên sử dụng)
->giống là đều gộp các nhánh lại nhau . Khac nhau là khi merge nó merge nó sẽ tạo 1 commit khi gop nhanh còn rebase nó k tạo nhanh mà nó gop thành đường thảng mà số lượng commit k thay đổi.nên dùng merge khi chúng ta chỉ xử lý conflict 1 lần còn  dùng rebase khi chung ta k muốn tạo thêm 1 commit để làm xấu lich sử trên github
5. Phân biệt git fetch và git clone
->git clone khi mà minh lấy source code lần đầu tiên về máy . git fetch khi mà tôi muốn cập nhập source mới nhât
6.Phân biệt git fetch và git pull
->git fetch là chỉ lấy code chưa có merge . còn git pull là fetch + merge
7.Phân biệt git pull và git pull --rebase
-> git pull =fetch   + merge . git pull --rebase = fetch   + rebase
8. Git log dùng để làm gì
-> dùng để xem tên người comit  , ngày commit , tên cac  commit ,branch 
9. Git status dùng để làm gì
->xem trạng thái cac file có  đang thay đổi  hay không ?
10. Git add dùng để làm gì
- dùng để add 1 file hoặc nhiều vào stages
11.Git commit dùng để làm gì?
-dùng để ghi chú 1 chức năng hay fix lỗi nào đó
12. Mô tả lệnh để tạo branch ở local
->git branch ten_nhanh
13 Mô tả lệnh để xóa branch ở local
->git branch ten_nhanh -D
14. Mô tả lệnh để xóa branch ở remote
->git push origin remoteBranch -d
15. Nhánh trung gian là gì
->khi mà ta fetch source code tu github ve local thì nhánh remote nó sẽ được chuyển xuống dưới local thông qua 1 nhánh gọi là nhánh trung gian
16. Detach HEAD là gì
17. Phân biệt HEAD và BRANCH
->HEAD có thể trỏ sang commit , branch .còn branch không thể trỏ sang commit khac được
18. Có mấy cách để xóa commit, mô tả và cho ví dụ
->có 2 cách để xóa commit . Đó là xóa mềm và xóa cứng .Xóa mềm chỉ xóa tên commit  đó thôi nội dung vẫn còn ,xóa cứng là xóa tên commit và nội dung là mất hết
-> Ví dụ 
- 1 cai file  c1.txt với nôi dung hello khi commit xong
-nếu dùng lệnh git reset --soft tên_commit thì  nó sẽ xóa tên commit 
-nếu dùng lệnh git reset --hard tên_commit thì  nó sẽ xóa nội tên commit  và nội dung commit 
19. Liệt kê các trạng thái của file trong git, giải thích từng trạng thái
-untracked ,modified ,unmodified,stages
-untracked : khi mà ta khỏi tạo chưa lm gi hết 
-modified
-unmodified
-stages :mà ta git add thì nó dưa vào stages