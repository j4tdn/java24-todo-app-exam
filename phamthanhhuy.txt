1. Viết chương trình/lệnh mô tả các bước thực hiện sơ đồ git tree sau đây ở local repository

- Tạo folder đặt tên bất kỳ, và truy cập vào folder
- Sử dung lệnh git bash here từ chuột phải, nhập lêệnh git init
- Commit 1: tạo file c1.txt
  + touch c1.txt
  + git add c1.txt
  + git commit -m "Add c1.txt"
- Tương tự với file c2.txt và  c3.txt
- Sau khi commit ở c3.txt, sử dung lệnh git branch feature master để tạo nhánh feature, sau đó dung lệnh git checkout feature để đưa con trỏ HEAD đến nhánh feature
- Commit 4: tạo file c4.txt
  + touch c4.txt
  + git add c4.txt
  + git commit -m "Add c4.txt"
- Tuơng tự với file c5.txt
- git checkout master để đưa con trỏ HEAD về nhánh master, sử dung lênh git branch bug master để tạo nhánh bug, sau đó tiếp tục git checkout bug để đưa con trỏ HEAD về nhánh bug
- Commit 6: tạo file c6.txt
  + touch c6.txt
  + git add .
  + git commit -m "Add c6.txt"
- Tương tự với file c7.txt và c8.txt ta được nhánh như hình

2. Viết lệnh thực hiện gộp nhánh bug vào nhánh feature sử dụng git merge 

- Con trỏ HEAD đang ở nhánh bug
git checkout feature
git merge bug


3. Viết lệnh thực hiện gộp nhánh feature vào bug sử dụng git rebase

- Con trở HEAD đang ở nhánh bug
git rebase feature
- Không xuất hiện conflict

4. Phân biệt git merge và git rebase(giống, khác nhau, khi nào nên sử dụng)

git merge là gộp 2 commit cha thành 1 commit con, 2 commit cha đó vẫn tồn tại và có chung 1 commit con, khi đó nhánh tại commit con sẽ là nhánh mà con trỏ HEAD trỏ trước khi gộp

git rebase là gộp 2 nhánh, tưừng commit của nhánh chính theo thứ tự cha con sẽ gộp với nhánh phụ tạo ra các commit mới là con của các commit nhánh phụ, các commit của nhánh chinnh sẽ bị xóa, và nhánh chính sẽ trỏ đến commit mới nhất

5. Phân biệt git fetch và git clone

git fetch là copy dữ lieu từ remote repo khi đã remote repo đã liên kết với local repo
git clone là copy dữ lieu từ remote repo đến local repo khi chưa liên kết đồng thời liên kêt chúng lại

6. Phân biệt git fetch và git pull

git pull là tổ hợp lệnh git fetch và git merge

7. Phân biệt git pull và git pull --rebase

git pull sử dung git merge
git pull --rebase sử sụng git rebase

8. Git log dùng để làm gì

Đê xem các commit và nhánh có liên kết, hiển thị chúng

9. Git status dùng để làm gì

Để xem trạng thái các file trong local repo

10. Git add dùng để làm gì

Để đưa các file về trạng thái staged

11. Git commit dùng để làm gì

Để tạo một commit với message 

12. Mô tả lệnh để tạo branch ở local

git branch <nhánh mới taoj> <nhánh ở vị trí cần thiết>

13. Mô tả lệnh để xóa branch ở local

git branch -d <tên nhánh>
git branch -D <tên nhánh>

14. Mô tả lệnh để xóa branch ở remote
 
git remote -f

15. Nhánh trung gian là gì

Nhánh trung gian là nơi chuyển tiếp code giữa local và remote, có thể làm việc với nhánh trung gian tại local

16. Detach HEAD là gì

HEAD là con trỏ trỏ đến nơi làm việc

17. Phân biệt HEAD và BRANCH

- HEAD có thể trỏ đến Branch, không có ngược lại
- HEAD trỏ đến version làm việc
- Branch tuợng truưng cho các version

18. Có mấy cách để xóa commit, mô tả và cho ví dụ

Có 2 cách để xóa commit;
- Xóa commit, giữ lại code: git reset --soft HEAD~1
- Xóa commit, xóa luôn cả code: git reser --hard HEAD~1
- Có thể sửa code, git add, và sau dùng git commit --amend -m "<tên commit>" để commit đè

19. Liệt kê các trạng thái của file trong git, giải thích từng trạng thái

- Untracked: các file chưa được liên kết với git
- Unmodified: là trạng thái các file sau khi commit, clean
- Modified: sau khi edit các file unmodified, chúng sẽ trở thành trạng thái modified
- Staged: là trạng thái sẵn sàng để commit, bằng các git add các file trong trạng thái modified


20. Mô tả các bước cần thực hiện khi nhận 1 task từ dự án, cho ví dụ

- git fetch hoặc git clone về local, vd git clone https://github.com/j4tdn/java24-todo-app-exam
- Xem kỹ version của task, git checkout -b <tên task> <tên nhánh trung gian của version>, vd git checkout -b t11-square origin/todo-app-2.0
- Code và commit
